{"title":"Saturday Daily Thread: Resource Request and Sharing! Daily Thread","description":"Found a neat resource related to Python over the past week? Looking for a resource to explain a certain topic?\n\nUse this thread to chat about and share Python resources!","link":"https://www.reddit.com/r/Python/comments/10szhe5/saturday_daily_thread_resource_request_and/","created":"2023-02-04","tags":["python","reddit"],"meta":{"num_comments":0}}
{"title":"Better Google Calendar API for Python","description":"I found that picture \u201cThe 50 push-ups in a month challenge\u201d back in 2017 and decided that it was time to try it.\n\nI wanted a calendar reminder of how many push-ups I need to do every day. As a software engineer, I couldn\u2019t afford to spend 10 minutes putting the events manually. So I spent 3 hours getting the official API to work to do this for me. Then I thought that this simple task shouldn\u2019t take 3 hours and spent the next couple of days implementing the initial version of the GCSA (Google Calendar Simple API). Several years later, I\u2019m happy that people find this project useful, you might too: [https://github.com/kuzmoyev/google-calendar-simple-api](https://github.com/kuzmoyev/google-calendar-simple-api)\n\nIssue reports, pull-requests are greatly appreciated :)\n\nHere is the [Getting started page](https://google-calendar-simple-api.readthedocs.io/en/latest/getting_started.html).","link":"https://www.reddit.com/r/Python/comments/10shzxt/better_google_calendar_api_for_python/","created":"2023-02-03","tags":["python","reddit"],"meta":{"num_comments":49}}
{"title":"My first game in Python - 3 IN A ROW - with TKINTER library","description":"Hi, this is my first game created in Python, I have used the Tkinter library. I would like you to tell me how you see the game. Thank you!\n\nLINK: [3 IN A ROW](https://github.com/Conper/TicTacToe)\n\n&amp;#x200B;\n\n[PREVIEW](https://i.redd.it/3ipjtog371ga1.gif)","link":"https://www.reddit.com/r/Python/comments/10sn2cx/my_first_game_in_python_3_in_a_row_with_tkinter/","created":"2023-02-03","tags":["python","reddit"],"meta":{"num_comments":14}}
{"title":"Testing files in Python like a pro","description":"&amp;#x200B;\n\n[Create test data files in many formats with almost no efforts.](https://preview.redd.it/ifv8oxbyq1ga1.jpg?width=720&amp;format=pjpg&amp;auto=webp&amp;v=enabled&amp;s=2e194341f6f99e0a3f2ecf4c8cce94ed17c0e81b)\n\n**Create test data files in many formats with almost no efforts.**\n\n## Why\n\nTest files are often not available when you need them. At least, not at the right time for testing, because your customer or partner doesn't have them yet or it's being delayed for a bureaucratic reason (such as signing of an NDA with you or their own clients).\n\nYou have to come up with something yourself. Each time. For every project you work on. For each file format that you are supposed to support.\n\nOr it could be that you do have a few test files, but they are not enough to make a stress-test to assure robustness of the system. You decide to test your pipeline with 100 different unique files (if you're lucky to have that much) and it all works. Then you go live and discover that your system doesn't perform well enough to handle a 1000 of them.\n\nOf course you might have a solution for that, but check first what [faker-file](https://faker-file.readthedocs.io/) has to offer.\n\n## History\n\nBefore [Faker](https://faker.readthedocs.io/) we used [Lipsum](https://www.lipsum.com/) (or `Lorem Ipsum`), which was still good (better than nothing anyway), but didn't make much sense.\n\nThen [Faker](https://faker.readthedocs.io/) (and `Faker`\\-like libraries) emerged to save us.\n\nThen test cases became more complex. Primary data sources were often files. We needed to test pipelines. [Faker](https://faker.readthedocs.io/) still helped a lot, but it was not convenient to copy your last-best-approach for files and reinvent the wheel over and over with each project.\n\nThen [faker-file](https://faker-file.readthedocs.io/) emerged to save us once again.\n\n## How does [faker-file](https://faker-file.readthedocs.io/) help to solve that problem?\n\nIn essence, [faker-file](https://faker-file.readthedocs.io/) is just a set of providers for the famous [Faker](https://faker.readthedocs.io/) library.\n\n* You can use it with [Faker](https://faker.readthedocs.io/) and [factory\\_boy](https://factoryboy.readthedocs.io/) (for ORM integration).\n* It works with [Django](https://www.djangoproject.com/).\n* It supports remote storages.\n* By default, it generates content of the files automatically (using [Faker](https://faker.readthedocs.io/)), but allows you to provide the content yourself (in `content` argument).\n\nYou can use it to run a comprehensive integration test of your ETL pipeline in your favorite cloud.\n\nSome of the most commonly-used file formats are supported:\n\n* `BIN`\n* `CSV`\n* `DOCX`\n* `EML`\n* `EPUB`\n* `ICO`\n* `JPEG`\n* `MP3`\n* `ODP`\n* `ODS`\n* `ODT`\n* `PDF`\n* `PNG`\n* `RTF`\n* `PPTX`\n* `SVG`\n* `TAR`\n* `TXT`\n* `WEBP`\n* `XLSX`\n* `ZIP`\n\n## Installation\n\n    pip install faker-file[common]\n\n&amp;#x200B;\n\nNote, that by default files will be created in `/tmp/tmp` directory.\n\n## Generate a DOCX file with fake content\n\n* Generate 1 `DOCX` file with fake content (generated by [Faker](https://faker.readthedocs.io/)).\n\n&amp;#x200B;\n\n    from faker import Faker\n    from faker_file.providers.docx_file import DocxFileProvider\n    \n    FAKER = Faker()\n    \n    FAKER.add_provider(DocxFileProvider)\n    \n    file = FAKER.docx_file()\n\n## Provide content manually\n\n* Generate 1 `DOCX` file with developer defined content.\n\n&amp;#x200B;\n\n    TEXT = \"\"\"\n    \u201cThe Queen of Hearts, she made some tarts,\n        All on a summer day:\n    The Knave of Hearts, he stole those tarts,\n        And took them quite away!\u201d\n    \"\"\"\n    \n    file = FAKER.docx_file(content=TEXT)\n\n* Similarly, generate 1 `PNG` file with developer defined content.\n\n&amp;#x200B;\n\n    from faker_file.providers.png_file import PngFileProvider\n    \n    FAKER.add_provider(PngFileProvider)\n    \n    file = FAKER.png_file(content=TEXT)\n\n* Similarly, generate 1 `PDF` file with developer defined content.\n\n&amp;#x200B;\n\n    from faker_file.providers.pdf_file import PdfFileProvider\n    \n    FAKER.add_provider(PdfFileProvider)\n    \n    file = FAKER.pdf_file(content=TEXT)\n\n## Provide templated content\n\nIt supports templating. You could simply write up a template for your document and generate documents based on it.\n\n    TEMPLATE = \"\"\"\n    {{date}} {{city}}, {{country}}\n    \n    Hello {{name}},\n    \n    {{text}}\n    \n    Address: {{address}}\n    \n    Best regards,\n    \n    {{name}}\n    {{address}}\n    {{phone_number}}\n    \"\"\"\n    \n    file = FAKER.pdf_file(content=TEMPLATE, wrap_chars_after=80)\n\n## Archive types\n\n## ZIP archive containing 1 TXT file with predefined content\n\nAs you might have noticed, some archive types are also supported.\n\n    from faker_file.providers.zip_file import ZipFileProvider\n    \n    FAKER.add_provider(ZipFileProvider)\n    \n    file = FAKER.zip_file(\n        options={\"count\": 1, \"create_inner_file_args\": {\"content\": TEXT}}\n    )\n\n## ZIP archive containing 3 DOCX files with predefined content\n\n    from faker_file.providers.helpers.inner import create_inner_docx_file\n    \n    file = FAKER.zip_file(\n        prefix=\"zzz\",\n        options={\n            \"count\": 3,\n            \"create_inner_file_func\": create_inner_docx_file,\n            \"create_inner_file_args\": {\n                \"prefix\": \"xxx_\",\n                \"max_nb_chars\": 1_024,\n                \"content\": TEXT + \"\\n\\n{{date}}\",\n            },\n            \"directory\": \"yyy\",\n        }\n    )\n\n## Nested ZIP archive\n\nAnd of course nested archives are supported too. Create a `ZIP` file which contains 5 `ZIP` files which contain 5 `ZIP` files which contain 2 `DOCX` files.\n\n* 5 `ZIP` files in the `ZIP` archive.\n* Content is generated dynamically.\n* Prefix the filenames in archive with `nested_level_1_`.\n* Prefix the filename of the archive itself with `nested_level_0_`.\n* Each of the `ZIP` files inside the `ZIP` file in their turn contains 5 other `ZIP` files, prefixed with `nested_level_2_`, which in their turn contain 2 `DOCX` files.\n\n&amp;#x200B;\n\n    from faker_file.providers.helpers.inner import create_inner_zip_file\n    \n    file = FAKER.zip_file(\n        prefix=\"nested_level_0_\",\n        options={\n            \"create_inner_file_func\": create_inner_zip_file,\n            \"create_inner_file_args\": {\n                \"prefix\": \"nested_level_1_\",\n                \"options\": {\n                    \"create_inner_file_func\": create_inner_zip_file,\n                    \"create_inner_file_args\": {\n                        \"prefix\": \"nested_level_2_\",\n                        \"options\": {\n                            \"count\": 2,\n                            \"create_inner_file_func\": create_inner_docx_file,\n                            \"create_inner_file_args\": {\n                                \"content\": TEXT + \"\\n\\n{{date}}\",\n                            }\n                        }\n                    },\n                }\n            },\n        }\n    )\n\nIt works similarly for `EML` files (using `EmlFileProvider`).\n\n    from faker_file.providers.eml_file import EmlFileProvider\n    from faker_file.providers.helpers.inner import create_inner_docx_file\n    \n    FAKER.add_provider(EmlFileProvider)\n    \n    file = FAKER.eml_file(\n        content=TEMPLATE,\n        options={\n            \"count\": 3,\n            \"create_inner_file_func\": create_inner_docx_file,\n            \"create_inner_file_args\": {\n                \"content\": TEXT + \"\\n\\n{{date}}\",\n            },\n        }\n    )\n\n## Storages\n\n## Example usage with Django (using local file system storage)\n\n    from django.conf import settings\n    from faker_file.providers.txt_file import TxtFileProvider\n    from faker_file.storages.filesystem import FileSystemStorage\n    \n    STORAGE = FileSystemStorage(\n        root_path=settings.MEDIA_ROOT,\n        rel_path=\"tmp\",\n    )\n    \n    FAKER.add_provider(TxtFileProvider)\n    \n    file = FAKER.txt_file(content=TEXT, storage=STORAGE)\n\n## Example usage with AWS S3 storage\n\n    from faker_file.storages.aws_s3 import AWSS3Storage\n    \n    S3_STORAGE = AWSS3Storage(\n        bucket_name=\"test-bucket\",\n        root_path=\"tmp\",  # Optional\n        rel_path=\"sub-tmp\",  # Optional\n        # Credentials are optional too. If your AWS credentials are properly\n        # set in the ~/.aws/credentials, you don't need to send them\n        # explicitly.\n        # credentials={\n        #     \"key_id\": \"YOUR KEY ID\",\n        #     \"key_secret\": \"YOUR KEY SECRET\"\n        # },\n    )\n    \n    file = FAKER.txt_file(storage=S3_STORAGE)\n\n## Augment existing files\n\nIf you think [Faker](https://faker.readthedocs.io/) generated data doesn't make sense for you and you want your files to look like a collection of 100 files you already have, you could use augmentation features.\n\nYou will need additional requirements:\n\n    pip install faker-file[data-augmentation]\n\nUsage example:\n\n    from faker_file.providers.augment_file_from_dir import (\n        AugmentFileFromDirProvider,\n    )\n    \n    FAKER.add_provider(AugmentFileFromDirProvider)\n    \n    file = FAKER.augment_file_from_dir(\n        source_dir_path=\"/home/me/Documents/faker_file_source/\",\n        wrap_chars_after=120,\n    )\n\nGenerated file will resemble text of the original document, but will not be the same.\n\nBy default `bert-base-multilingual-cased` model is used, which is pre-trained on the top 104 languages with the largest Wikipedia using a masked language modeling (MLM) objective. If you want to use a different model, specify the proper identifier in the `model_path` argument. Some well working options for `model_path` are:\n\n* `bert-base-multilingual-cased`\n* `bert-base-multilingual-uncased`\n* `bert-base-cased`\n* `bert-base-uncased`\n* `bert-base-german-cased`\n* `GroNLP/bert-base-dutch-cased`\n\n&amp;#x200B;\n\n    from faker_file.providers.augment_file_from_dir.augmenters import (\n        nlpaug_augmenter\n    )\n    \n    file = FAKER.augment_file_from_dir(\n        text_augmenter_cls=(\n            nlpaug_augmenter.ContextualWordEmbeddingsAugmenter\n        ),\n        text_augmenter_kwargs={\n            \"model_path\": \"bert-base-cased\",\n            \"action\": \"substitute\",  # or \"insert\"\n        }\n    )\n\nRefer to `nlpaug` [docs](https://nlpaug.readthedocs.io/en/latest/example/example.html) and check `Textual augmenters` examples.\n\n## Read further\n\n* Documentation is available on [Read the Docs](http://faker-file.readthedocs.io/).\n* For bootstrapping check the [Quick start](https://faker-file.readthedocs.io/en/latest/quick_start.html).\n* For various ready to use code examples see the [Recipes](https://faker-file.readthedocs.io/en/latest/recipes.html).","link":"https://www.reddit.com/r/Python/comments/10swsdv/testing_files_in_python_like_a_pro/","created":"2023-02-03","tags":["python","reddit"],"meta":{"num_comments":0}}
{"title":"Ansible vs Python for workstations and VM installments","description":"At my place, there is a big code base of Python scripts, managed by a simple milestone system, that responsible for installing workstations of Developers (everyone is developing on Ubuntu)\n\nThe scripts are doing pretty basic stuff that prepares the machine to be ready to use. For example: installing vscode, docker, configure pip and a lot more\n\nI have been thinking about refactoring this codebase to be a set of ansible playbooks for a number of reasons:\n1. Ansible using states and the Python scripts (if no check is written that the state exists) can do the install all over again.\n2. Ansible SSH framework\n3. The combination of the SSH and the states will let us run all of the playbooks on the entire workstations whenever there are new updates that we are need to distribute.\n4. Ansible seems to have big community and it will allow us to use playbooks written by its community\n5. We want a tool for installing basic requirements on VMs, and Ansible feels like a good tool. But, it will create technical debt if we will invest both on the scripts for users and the playbooks for VMs.\n\nAnd despite all that, do you thinks these reasons really justify this big refactor? \nOr maybe we are just overhyped about ansible..","link":"https://www.reddit.com/r/Python/comments/10t7cng/ansible_vs_python_for_workstations_and_vm/","created":"2023-02-04","tags":["python","reddit"],"meta":{"num_comments":1}}
{"title":"As a long time programmer what are some important coding styles ?","description":"I  am a math student but work as a programmer. When I started to work I had to  learn that there are some common coding rules. I never learned that in  my studies but they seem to be obvious for those who studied or worked  for a long time in computer science.\n\nWould like to know your advice / perspectives :)\n\ntrivial examples: using typing lib, enums instead of strings etc..","link":"https://www.reddit.com/r/Python/comments/10snjaf/as_a_long_time_programmer_what_are_some_important/","created":"2023-02-03","tags":["python","reddit"],"meta":{"num_comments":36}}
{"title":"AI, Python and Wordpress","description":"Hi, I am doing a casestudy in terms of how good would AI-generated blogposts rank in Google.\n\n  \nMy tool can be found here, it basically generates blogposts, updates it to wordpress - everything from your commandline.\n\n[https://github.com/grumpyp/blogging-with-ai](https://github.com/grumpyp/blogging-with-ai)  \n\n\nHappy to get feedback!","link":"https://www.reddit.com/r/Python/comments/10ssjii/ai_python_and_wordpress/","created":"2023-02-03","tags":["python","reddit"],"meta":{"num_comments":8}}
{"title":"Control Flow (Loops)","description":"So, I am new to programming and I have been trying my best to get a grasp over for loops in python, I am struggling a lot I feel like I am not entirely understanding the logical part of how the for loops will help my program to work correctly.\n\nI can do the maths, but still unable to use the maths in a working program with the for loops.\n\nIs there any way I can practice it? If any of you guys struggled with similar problems, please let me know how? Any website to practice the for loops, or core python problem-solving techniques that will help me out over time would honestly help out loads!!!","link":"https://www.reddit.com/r/Python/comments/10t0qsz/control_flow_loops/","created":"2023-02-04","tags":["python","reddit"],"meta":{"num_comments":2}}
{"title":"opinions about my project - sushi","description":"**Before going any further, the project is still in early stage. It can be used because its already published to pypi but mainly I wanted some feedback about it**  \n\n\nHey again r/python,\n\nI wanted to get some feedback about my new project: sushi. It allows you to run functions from any language (for example cpp) inside e.g python! Some people may remember that name from my another project, that was deleted and replaced with this project. The core is written in python.\n\nIt's still in early stage and everything may change, so here's what to note:\n\n* readme is ready\n* wiki is *half ready*\n* it can be installed by pip (name: sushipy)\n* there might be limited support for languages\n* lots of bugs\n\nHope to get some feedback from you!\n\ngithub repo: [here](https://github.com/dev-sushi/sushi)","link":"https://www.reddit.com/r/Python/comments/10styuv/opinions_about_my_project_sushi/","created":"2023-02-03","tags":["python","reddit"],"meta":{"num_comments":5}}
{"title":"What are your favorite python decorators and why?","description":"","link":"https://www.reddit.com/r/Python/comments/10sv972/what_are_your_favorite_python_decorators_and_why/","created":"2023-02-03","tags":["python","reddit"],"meta":{"num_comments":9}}
{"title":"PokerPy , Python module for precise and fast Texas Hold'em Poker probability calculations.","description":"&amp;#x200B;\n\n**LINK:** [PokerPy](https://github.com/glpcc/PokerPy)\n\nHi, I made this module to learn C++ and Python integration and also to in the future maybe build a Poker AI. But I think this module can still be usefull for building automated poker scripts and apps easly form python.\n\nIn my windows machine it takes around 0.7secs for all calculations for 7 players with 2 cards each. In my Linux machine (worst CPU) it takes less (around 0.5 secs) for some reason :)\n\nAny thing more than 2 cards per player can be considered realtime.\n\nAny recommendation or comment is gladly welcomed.","link":"https://www.reddit.com/r/Python/comments/10rodh3/pokerpy_python_module_for_precise_and_fast_texas/","created":"2023-02-02","tags":["python","reddit"],"meta":{"num_comments":55}}
{"title":"Cookiecutter template to build and deploy FastAPI backends\u2026batteries included","description":"Here is a small project I use to get up and running with FastAPI backends https://github.com/nickatnight/cookiecutter-fastapi-backend  \n  \nComes with some nice bells and whistles: nginx web proxy, postgres, async, ci/cd, and auto certbot renewal to name a few.","link":"https://www.reddit.com/r/Python/comments/10s6b5x/cookiecutter_template_to_build_and_deploy_fastapi/","created":"2023-02-03","tags":["python","reddit"],"meta":{"num_comments":4}}
{"title":"\"Introducing \"callpyback\": Last callbacks for your Python functions you will ever need - Feedback and Contributions Wanted!\"","description":"https://github.com/samuelgregorovic/callpyback\n\nWe are proud to announce the release of our new Python library, \"callpyback\" - a flexible and powerful tool for adding callbacks to your functions. With its wide range of features, you can customize the behavior of your functions in different stages of their execution, making it easier to build robust and reliable applications.\n\nIf you're a Python developer, we invite you to check out \"callpyback\" on GitHub at https://github.com/samuelgregorovic/callpyback. We would also love to hear your feedback and get your contributions to the project.\n\nThe \"callpyback\" library is still in its early stages, and we believe there is a lot of room for improvement. If you have any suggestions, bug reports, or feature requests, feel free to open an issue or submit a pull request on GitHub. Your contribution can help us make this library even better!\n\nWe hope you enjoy using \"callpyback\" as much as we enjoyed building it! Thank you for your support and we look forward to hearing from you.","link":"https://www.reddit.com/r/Python/comments/10s3uzq/introducing_callpyback_last_callbacks_for_your/","created":"2023-02-03","tags":["python","reddit"],"meta":{"num_comments":24}}
{"title":"Making a loudness monitor for online meetings using Python","description":"I've received complaints from my wife and others in the house that I speak too loud. So I decided to write a script that measures the sound volume from my microphone and alerts me when there is too much noise in my office. \n\n[https://rolisz.ro/2023/02/02/making-a-loudness-monitor/](https://rolisz.ro/2023/02/02/making-a-loudness-monitor/)","link":"https://www.reddit.com/r/Python/comments/10rzbcv/making_a_loudness_monitor_for_online_meetings/","created":"2023-02-02","tags":["python","reddit"],"meta":{"num_comments":6}}
{"title":"Sanic Security: An effective, simple, and async security library for the Sanic framework.","description":"Sanic Security is an authentication, authorization, and verification library designed for use with [Sanic](https://github.com/huge-success/sanic). This library contains a variety of features including:\n\n* Login, registration, and authentication (including access/refresh tokens)\n* Two-factor authentication\n* Two-step verification\n* Captcha\n* Role based authorization with wildcard permissions\n\nIntended to be an out-of-the-box security solution.\n\nThe repository README comes with in depth explanations and documentation. [https://github.com/sunset-developer/sanic-security](https://github.com/sunset-developer/sanic-security)","link":"https://www.reddit.com/r/Python/comments/10spyyd/sanic_security_an_effective_simple_and_async/","created":"2023-02-03","tags":["python","reddit"],"meta":{"num_comments":0}}
{"title":"FluidFrames.RIFE 10.0 - video frames AI interpolation app (RIFE-HDv3)","description":"&amp;#x200B;\n\nhttps://preview.redd.it/8n9da9tmmzfa1.png?width=1465&amp;format=png&amp;auto=webp&amp;v=enabled&amp;s=08e4548a2d5b096e9dbf2283442af9bb11e1fd15\n\n* Github: [https://github.com/Djdefrag/FluidFrames.RIFE](https://github.com/Djdefrag/FluidFrames.RIFE)\n* Itch: [https://jangystudio.itch.io/fluidframesrife](https://jangystudio.itch.io/fluidframesrife)\n\n### What is\u00a0FluidFrames.RIFE?\n\nFluidFrames.RIFE is a Windows app that uses RIFE-HDv3 artificial intelligence to doubling or quadrupling videos fps.\n\nExample:\n\nhttps://i.redd.it/0wasmm50ozfa1.gif\n\nhttps://reddit.com/link/10smhne/video/o287wsr0ozfa1/player","link":"https://www.reddit.com/r/Python/comments/10smhne/fluidframesrife_100_video_frames_ai_interpolation/","created":"2023-02-03","tags":["python","reddit"],"meta":{"num_comments":0}}
{"title":"How RAT Mutants, in Python, Steal Data and Evade Detection","description":"[https://hackernoon.com/how-rat-mutants-in-python-steal-data-and-evade-detection](https://hackernoon.com/how-rat-mutants-in-python-steal-data-and-evade-detection)\n\nEven though malicious Python packages are found every day by our security researchers, a new type of malware we call RAT mutants is catching our attention. \n\nThe malware has shifted and adapted over time to be more evasive and dangerous. \n\nThis is the story of how they can steal your cryptocurrency wallets and personal data, remotely control your mouse and keyboard, and evolve to evade detection.","link":"https://www.reddit.com/r/Python/comments/10sm06c/how_rat_mutants_in_python_steal_data_and_evade/","created":"2023-02-03","tags":["python","reddit"],"meta":{"num_comments":0}}
{"title":"I built cakework - open source platform to deploy computationally intensive Python functions as serverless jobs, with no timeouts","description":"Hi friends! I ran into this problem enough times at my last few jobs that I built a tool to solve it. I spent many hours building Docker containers for my Python functions, as many of the data science modules required building C libraries (since they significantly speed up compute-intensive routines, such as math calculations). Deploying the containers to AWS Lambda or Fargate (if the processes required more CPU or memory or were &gt;15 minutes) and wiring functions to talk to each other using queues, databases, and blob storage made iterating on the actual code, which wasn't even that complex most of the time, slow.\n\nI made cakework [https://github.com/usecakework/cakework](https://github.com/usecakework/cakework), a platform that lets you spin up your Python functions as serverless, production-scale backends with a single command. Using the client SDK, you submit requests, check status, and get results. You can also specify the amount of CPU (up to 16 cores) and memory (up to 128GB) for each individual request, which is helpful when your data size and complexity varies across different requests.\n\nIt's open source &lt;3. Here are some fun examples to get you started: [https://docs.cakework.com/examples](https://docs.cakework.com/examples)\n\nWould love to hear your thoughts!","link":"https://www.reddit.com/r/Python/comments/10ryiqt/i_built_cakework_open_source_platform_to_deploy/","created":"2023-02-02","tags":["python","reddit"],"meta":{"num_comments":5}}
{"title":"[PYGAME] THE SHIP THAT FIRES BULLETS in a version of mine.","description":"Hi everyone, it is nice to meet you all from all over the world\n\nI am a beginner of Python, this is my first project - programming a game based on the book \"Python Crash Course of Eric Matthes\". Since I find that there are a lot of readers of this book but rarely someone did this project, I want to share my code thru Git.\n\nIf you need it you can take it. I also need some STARS for motivation only. Please drop some for me. Thank you guys\n\nLink:  [MauricePham/Alien-Invasion: \\[PYGAME\\] The invasion of Aliens (github.com)](https://github.com/MauricePham/Alien-Invasion)","link":"https://www.reddit.com/r/Python/comments/10se0dt/pygame_the_ship_that_fires_bullets_in_a_version/","created":"2023-02-03","tags":["python","reddit"],"meta":{"num_comments":5}}
