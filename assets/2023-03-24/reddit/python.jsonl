{"title":"Thursday Daily Thread: Python Careers, Courses, and Furthering Education!","description":"Discussion of using Python in a professional environment, getting jobs in Python as well as ask questions about courses to further your python education!\n\n**This thread is not for recruitment, please see** r/PythonJobs **or the thread in the sidebar for that.**","link":"https://www.reddit.com/r/Python/comments/11z1t15/thursday_daily_thread_python_careers_courses_and/","created":"2023-03-23","tags":["reddit","python"],"meta":{"num_comments":1}}
{"title":"Is it a good time to use asyncio?","description":"I used asyncio around 6 months ago to build our CLI that does a lot of IPC with NodeJS processes. The CLI turned out to be a nightmare for our users because we didn't realize how wrong our code was due to following reasons:\n\n1. We didn't handle \\`asyncio.CancelledError\\` properly. It seems all the co-routine should have try-catch.\n2. Consequently, something as simple as handling \\`KeyboardInterrupt\\` became a nightmare for us.\n3. We went through the python docs but it wasn't clear how to handle edge cases such as an async generator during KeyboardInterrupt.\n4. The spec around asyncio is changing very fast. I realized asyncio is not backward compatible between 3.11 and 3.7. Please correct me if I am wrong.\n\nWould love to know the views of python developers on this.","link":"https://www.reddit.com/r/Python/comments/11zsr7f/is_it_a_good_time_to_use_asyncio/","created":"2023-03-23","tags":["reddit","python"],"meta":{"num_comments":54}}
{"title":"Customs Inspector - Easy manual auditing of Python Poetry package updates","description":"Hello all,\n\nVery excited to share a tool I've been working on and explore it's feasibility with the community.\n\n[https://github.com/R9295/customs-inspector](https://github.com/R9295/customs-inspector)\n\nCustoms Inspector  hooks into Poetry's package management system to allow for manual auditing of package changes during updates. It opens a browser with a diff view of the changes for you to manually audit.\n\nThe idea is to harness the community's collective effort to find malicious packages.\n\nNo one likes manual auditing, but perhaps, this makes it less so?\n\nLooking forward to your thoughts","link":"https://www.reddit.com/r/Python/comments/1201eri/customs_inspector_easy_manual_auditing_of_python/","created":"2023-03-23","tags":["reddit","python"],"meta":{"num_comments":3}}
{"title":"Arguments against separating `test` from `src` in a python package?","description":"The Python Packaging Authority recommends separating the test directory from the src (source code) directory in a Python application:\n\n[https://packaging.python.org/en/latest/tutorials/packaging-projects/#creating-the-package-files](https://packaging.python.org/en/latest/tutorials/packaging-projects/#creating-the-package-files)  \n\n\nPersonally, I have always preferred this approach of keeping tests outside the package rather than mixing them with the source code (tests in package).\n\nHowever, in the interest of expanding my perspective and learning something new, I am open to exploring alternative viewpoints. What are the main arguments for including tests within the package itself?\n\n[Image taken from https:\\/\\/blog.ionelmc.ro\\/2014\\/05\\/25\\/python-packaging\\/](https://preview.redd.it/dqfsq591khpa1.png?width=1004&amp;format=png&amp;auto=webp&amp;v=enabled&amp;s=f8c2ad36f52bb5eaf2879aee5257992dc438d262)","link":"https://www.reddit.com/r/Python/comments/11zjjzy/arguments_against_separating_test_from_src_in_a/","created":"2023-03-23","tags":["reddit","python"],"meta":{"num_comments":66}}
{"title":"Part time work/roles using python.","description":"Hey I am looking to up-skill in Python. Although I currently teach piano part time I don't want to lose that job if most Python based jobs are full time. Does anyone here work part time?","link":"https://www.reddit.com/r/Python/comments/11zzn4i/part_time_workroles_using_python/","created":"2023-03-23","tags":["reddit","python"],"meta":{"num_comments":8}}
{"title":"Python script to generate Table of Contents of a users Github gists","description":"I created a python script to generate a table of contents of a users public Github gists.\n\nI welcome any input or opinion on it so I can expand my python knowledge.\n\nThanks in advance, here's the link to the repo:\n\n[https://github.com/DevGW/Gist-Table-of-Contents](https://github.com/DevGW/Gist-Table-of-Contents)","link":"https://www.reddit.com/r/Python/comments/1200ngq/python_script_to_generate_table_of_contents_of_a/","created":"2023-03-23","tags":["reddit","python"],"meta":{"num_comments":0}}
{"title":"I am an incoming Aerospace Engineering undergrad and would like some feedback","description":"In order to expand my skillset I thought about getting certified in Python to help with future projects within programming and engineering. Since I am a beginner, what type of Python certification should I go for? I would prefer it to be useful to present in my resume for future opportunities.","link":"https://www.reddit.com/r/Python/comments/11zvsv5/i_am_an_incoming_aerospace_engineering_undergrad/","created":"2023-03-23","tags":["reddit","python"],"meta":{"num_comments":18}}
{"title":"Galactic Something","description":"I'm using the lib pygame to develop an asteroid-ish game, it's kinda far from being complete but i would love to hear your oppinion about it :)  \nThe code is not optimal/clean yet, but it's something. (and i just started using github, so ye...)\n\nHere is the code: [https://github.com/ErikDio/galactic-something](https://github.com/ErikDio/galactic-something)\n\n&amp;#x200B;\n\nhttps://reddit.com/link/11zo0ou/video/s84vmsgjbipa1/player","link":"https://www.reddit.com/r/Python/comments/11zo0ou/galactic_something/","created":"2023-03-23","tags":["reddit","python"],"meta":{"num_comments":4}}
{"title":"Live Tutorial on Scaling Python with Dask and Coiled (April 13)","description":"[Click here to register!](https://www.meetup.com/bethesda-data-science-networking-meetup/events/292411174/)  \n\n\nMy meetup group is hosting Dr. Naty Clementi, one of the developers of Dask and Coiled, for a live, interaction tutorial on April 13th at 6:30pm ET (10:30pm UTC)\n\nDask is a powerful library for parallel computing in Python and used in big data, machine learning, anywhere general-purpose parallelism is needed. Coiled extends Dask with cloud infrastructure and features like easy cloud deployment, remote package synchronization, cost management, and observability and performance hinting. \n\nThe presentation will be followed by a Q&amp;A session--if you're curious about scaling your Python projects than come join us!","link":"https://www.reddit.com/r/Python/comments/11zubw8/live_tutorial_on_scaling_python_with_dask_and/","created":"2023-03-23","tags":["reddit","python"],"meta":{"num_comments":3}}
{"title":"Cheshire Cat - Open source layer on top of any language model (extendible via plugins)","description":"&amp;#x200B;\n\n \\^.\\_.\\^\n\n&amp;#x200B;\n\nThe Cheshire Cat is an open source, customizable AI architecture:\n\n&amp;#x200B;\n\n\\- language model agnosatic (works with OpenAI, Cohere, HuggingFace models, custom)\n\n\\- long term memory\n\n\\- can use external tools (APIs, other models)\n\n\\- can ingest documents (.pdf, .txt)\n\n\\- 100% dockerized\n\n\\- extendible via plugins\n\n&amp;#x200B;\n\nWaiting for you to try it out and contribute with tutorials, code, and whatever makes you happy\n\n&amp;#x200B;\n\n\\#opensource #artificialintelligence #cognitivecomputing #deeplearning #cheshirecat\n\n&amp;#x200B;\n\nTutorial:\n\n&amp;#x200B;\n\n[https://www.youtube.com/watch?v=srsaYy0xmkc](https://www.youtube.com/watch?v=srsaYy0xmkc)\n\n&amp;#x200B;\n\nRepo:\n\n&amp;#x200B;\n\n[https://github.com/pieroit/cheshire-cat](https://github.com/pieroit/cheshire-cat)","link":"https://www.reddit.com/r/Python/comments/11zk83o/cheshire_cat_open_source_layer_on_top_of_any/","created":"2023-03-23","tags":["reddit","python"],"meta":{"num_comments":2}}
{"title":"Re-usable engine for classic \"snake\" game","description":"\"engine\" is probably a bit of a grand term for this, but basically, there is a method that accepts a directional input (up/down/left/right) and produces a new game state for each frame of the game. Collecting/reading the inputs and drawing the game state is up to you (this also makes it useful for anyone wanting to train some ML system to play snake, if that's what you're into).  \n\n\nThere is also a sample terminal-based implementation as the module \\_\\_main\\_\\_, if you just wanna play snake :)   \n\n\n[https://eriknyquist.github.io/snakeng/](https://eriknyquist.github.io/snakeng/)","link":"https://www.reddit.com/r/Python/comments/11z5mh1/reusable_engine_for_classic_snake_game/","created":"2023-03-23","tags":["reddit","python"],"meta":{"num_comments":4}}
{"title":"How do I advance as a Python Programmer in general?","description":"Hey guys, randomly about 7 months ago I decided I wanted to learn how to code with python. I have done my fair share of watching tutorials and have just been working on small projects ever since. I have gotten to the point where I can understand almost any python code (aside from the game developing side I have never touched that) but I still am pretty lackluster at writing my own code. Anybody have advice for me on how to improve writing my own code?","link":"https://www.reddit.com/r/Python/comments/11yzbnn/how_do_i_advance_as_a_python_programmer_in_general/","created":"2023-03-22","tags":["reddit","python"],"meta":{"num_comments":15}}
{"title":"TUI app with 100+ interactive Python Regex exercises","description":"Hello!\n\nHaving an interactive program that automatically loads questions and checks the solution is wonderful to have while learning a topic. I wrote a [TUI app](https://github.com/learnbyexample/TUI-apps/blob/main/PyRegexExercises) that has beginner to advanced level exercises for Python regular expressions. There are more than 100 exercises covering both the builtin `re` and third-party `regex` modules.\n\nThis app is available on PyPI as [regexexercises](https://pypi.org/project/regexexercises/). Example installation instructions are shown below, adjust them based on your preferences and OS.\n\n    # virtual environment\n    $ python3 -m venv textual_apps\n    $ cd textual_apps\n    $ source bin/activate\n    $ pip install regexexercises\n\n    # launch the app\n    $ regexexercises\n\nTo run the app without having to enter the virtual environment again, add this alias to `.bashrc` (or equivalent):\n\n    # you'll have to change the path\n    alias regexexercises='/path/to/textual_apps/bin/regexexercises'\n\nAdjust the terminal dimensions for the widgets to appear properly, for example 84x25 (characters x lines). Visit https://youtu.be/0oXPeF8HutQ for a video demo. There's a user guide within the app as well.\n\nThese exercises have been adapted from my [Understanding Python re(gex)?](https://github.com/learnbyexample/py_regular_expressions) ebook (free to read online).\n\nHope you'll find this app useful. Let me know your feedback. Happy learning :)","link":"https://www.reddit.com/r/Python/comments/11ygklf/tui_app_with_100_interactive_python_regex/","created":"2023-03-22","tags":["reddit","python"],"meta":{"num_comments":11}}
{"title":"Tools for address verification/repair","description":"Curious if anyone has experience with tools that can help me build an address verification/repair component of a data quality tool? Thanks very much in advance.","link":"https://www.reddit.com/r/Python/comments/11zepzq/tools_for_address_verificationrepair/","created":"2023-03-23","tags":["reddit","python"],"meta":{"num_comments":1}}
{"title":"Redditors, anyone knows a good Dashboard example that we can get some inspiration from to manage a Statistical process control to have in a manufacturing environment?","description":"","link":"https://www.reddit.com/r/Python/comments/11z6xnm/redditors_anyone_knows_a_good_dashboard_example/","created":"2023-03-23","tags":["reddit","python"],"meta":{"num_comments":3}}
{"title":"Super Fast Proxy Fetcher for developers","description":"tl;dr I built ballyregan - a python package proxy fetcher that finds free valid proxies in seconds (300 proxies / 30s).\n\nHi everyone, I'm Idan, a software developer and former DevOps engineer. I was scrapping some websites for an automation when my IP got blocked and banned. Then I discovered the proxy world.\n\nso Ballyregan is a proxy fetcher that aims to be the fastest and most reliable out there. It fetches proxies from many different providers, validates them async to provide high performance and speed, and finally allows you to filter your proxies by protocol and anonymity level.\n\nWanna try out? Star us on Github! \u2b50: [Star!](https://github.com/idandaniel/ballyregan) (it really does help me out in keeping this thing going)","link":"https://www.reddit.com/r/Python/comments/11yh3qc/super_fast_proxy_fetcher_for_developers/","created":"2023-03-22","tags":["reddit","python"],"meta":{"num_comments":26}}
{"title":"refine a pslg with iterated snap rounding","description":"[ShayHill/snap\\_pslg: Clean up a pslg with iterated snap rounding (github.com)](https://github.com/ShayHill/snap_pslg) \n\n# snap_pslg\n\nRefine a [planar straight-line graph](https://en.wikipedia.org/wiki/Planar_straight-line_graph) with [iterated snap rounding](https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.23.220).\n\n* floor all points to integer coordinates\n* eliminate edge intersections and t-junctions\n* if allowed to converge, no point will be within .5 units of an edge. You can remove this constraint entirely, maintaing more of the input shape at the cost of near t-junctions, by setting max_iterations to 0.\n\nThis will slightly distort the pslg, but the result will be ready for triangulation and other algorithms.\n\n## install\n~~~\npip install snap_pslg\n~~~\n\n## signature\n~~~python\nVec2 = Annotated[Iterable[float], \"2D vector\"]\n\ndef snap_round_pslg(\n    points: Iterable[Vec2], edges: Iterable[tuple[int, int]], max_iterations: int = 100\n) -&gt; tuple[list[IntPoint], list[tuple[int, int]]]:\n    \"\"\"Perform one iteration of snap rounding.\n\n    :param points: A list of 2D points\n    :param edges: A list of edges, each a pair of indices into points\n    :param max_iterations: optionally limit number of iterations to perform. By\n        default, will try 100 iterations to reach convergence.\n    :return: A list of 2D points, a list of edges, each a pair of indices into points\n\n    Some of the points may not have indices. That is fine.\n    \"\"\"\n~~~\n\n## usage\n\n~~~python\nfrom snap_pslg import snap_round_pslg\n\npoints = [(0, 0), (3, 0), (3, 3), (0, 3), (5, 5)]\nedges = [(0, 2), (1, 3)]\n\n# You might have noticed that point (5, 5) was never used. This is fine. It\n# will be retained as a point and any line segments that pass very close to it\n# will be routed through it.\n\nnew_points, new_segments = snap_round_pslg(points, edges)\n\nnew_points  # [(0, 0), (5, 5), (3, 3), (2, 2), (0, 3), (3, 0)]\nnew_edges  # [(0, 3), (4, 3), (3, 2), (3, 5)]\n\n# a new point, (3, 3) has been added at the segment intersection\n# each segment is broken into two pieces\n~~~","link":"https://www.reddit.com/r/Python/comments/11z7d4b/refine_a_pslg_with_iterated_snap_rounding/","created":"2023-03-23","tags":["reddit","python"],"meta":{"num_comments":0}}
{"title":"GPTerminator - ChatGPT in the Terminal UPDATED","description":"Hey everyone, I posted about this project a while back, however, lots of changes have been made and I would appreciate if you guys checked it out! You can now copy code, save/load chats, configure, etc.\n\nRepository link: [https://github.com/AineeJames/ChatGPTerminator](https://github.com/AineeJames/ChatGPTerminator)\n\n[Example of GPTerminator](https://preview.redd.it/36qk7nvgoepa1.png?width=1587&amp;format=png&amp;auto=webp&amp;v=enabled&amp;s=b68f2c5af57c9e24e0832610db1c1bbd00b3d805)","link":"https://www.reddit.com/r/Python/comments/11z6xd0/gpterminator_chatgpt_in_the_terminal_updated/","created":"2023-03-23","tags":["reddit","python"],"meta":{"num_comments":1}}
{"title":"Python-based (or usable through command-line) synths and samplers","description":"Hey all! I'm playing around with music generation in Python, but I've run into an issue where the synth I'm using only works with SoundFonts (.sf2), and while they're okay, they mostly sound pretty lame. Can anyone suggest some synths and/or samplers that work with Python or at least command line? It would need to take midi data and generate audio out of it.\n\n&amp;#x200B;\n\nAs a side note, I use Logic Pro/Ableton, so if there's a way to use VST or Audiounit synths that I already own inside Python, that would be HUGE.","link":"https://www.reddit.com/r/Python/comments/11yrwfz/pythonbased_or_usable_through_commandline_synths/","created":"2023-03-22","tags":["reddit","python"],"meta":{"num_comments":9}}
