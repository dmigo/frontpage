{"title":"Sunday Daily Thread: What's everyone working on this week?","description":"Tell /r/python what you're working on this week! You can be bragging, grousing, sharing your passion, or explaining your pain. Talk about your current project or your pet project; whatever you want to share.","link":"https://www.reddit.com/r/Python/comments/11v57uj/sunday_daily_thread_whats_everyone_working_on/","created":"2023-03-19","tags":["python","reddit"],"meta":{"num_comments":12}}
{"title":"Monday Daily Thread: Project ideas!","description":"Comment any project ideas beginner or advanced in this thread for others to give a try! If you complete one make sure to reply to the comment with how you found it and attach some source code! If you're looking for project ideas, you might be interested in checking out Al Sweigart's, [\"The Big Book of Small Python Projects\"](https://inventwithpython.com/bigbookpython/) which provides a list of projects and the code to make them work.","link":"https://www.reddit.com/r/Python/comments/11w27d5/monday_daily_thread_project_ideas/","created":"2023-03-20","tags":["python","reddit"],"meta":{"num_comments":0}}
{"title":"NASA's Cassini - Cosmic Dust Analyzer: How to calibrate a space instrument","description":"Hello everyone,\n\nIn my current small tutorial series I am showing how the Cassini Cosmic Dust Analyzer (CDA) was calibrated. A detailed description of the initial idea can be seen [here](https://youtu.be/rO6w9B0Jw7U) or read here on Wikipedia: [https://en.wikipedia.org/wiki/Cosmic\\_Dust\\_Analyzer](https://en.wikipedia.org/wiki/Cosmic_Dust_Analyzer).\n\nNow before an instrument is set to space one needs to have an understanding and also (empirical) equations and algorithms to convert electric signals into the physical units you'd like to derive. E.g., a current or voltage corresponds to the velocity of a dust particle. To achieve this, the instrument is calibrated in a dust accelerator. Yes, you hear it correctly. A ... \"Cern like accelerator\" ... not for atoms, but for micrometer sized dust particles (e.g., made of iron, Latex, or carbonous compositions).\n\nNow in this small series I want to show how the instrument is calibrated, what kind of calibration functions exist (empirical ones) and how one could use Machine Learning to improve the calibration accuracy of the instrument.\n\nIn this first video it is about the data exploration and understanding. The video and corresponding Open Source GitHub Link can be seen below.\n\nHope you'll like it; and if you work in a lab; also doing some calibration work, maybe the ML based approach will be of interest for you!\n\nBest,\n\nThomas\n\nYouTube: [https://youtu.be/gq-qk\\_Jq5p0](https://youtu.be/gq-qk_Jq5p0)\n\nGitHub: [https://github.com/ThomasAlbin/Astroniz-YT-Tutorials/blob/main/%5BProject%5D-Cassini-CDA/01-Calibration/01\\_data\\_exploration.ipynb](https://github.com/ThomasAlbin/Astroniz-YT-Tutorials/blob/main/%5BProject%5D-Cassini-CDA/01-Calibration/01_data_exploration.ipynb)","link":"https://www.reddit.com/r/Python/comments/11vjmc2/nasas_cassini_cosmic_dust_analyzer_how_to/","created":"2023-03-19","tags":["python","reddit"],"meta":{"num_comments":4}}
{"title":"I've created one of the Fastest Python web Frameworks!!","description":"**Panther**  \n**Github**: [https://github.com/AliRn76/panther](https://github.com/AliRn76/panther)  \n**Documentation**: [https://pantherpy.github.io/](https://pantherpy.github.io/)  \n\n\nhttps://preview.redd.it/gtec70b1uroa1.png?width=831&amp;format=png&amp;auto=webp&amp;v=enabled&amp;s=08c1d9b71f3f555297432cc817dfa09d05c67c66","link":"https://www.reddit.com/r/Python/comments/11vzvde/ive_created_one_of_the_fastest_python_web/","created":"2023-03-19","tags":["python","reddit"],"meta":{"num_comments":23}}
{"title":"Python Cybersecurity \u2014 Build your own python tools (PortScanner, Visual Network Tracker and Anonymous FTP Scanner)","description":"**Python Cybersecurity \u2014 PortScanner**\n\nBuild a simple Port Scanner using the Python Programming language. Port Scanner is an application designed to probe a server or host for open ports. Such an application may be used by administrators to verify security policies of their networks and by attackers to identify network services running on a host and exploit vulnerabilities.\n\n**Link**: [https://youtu.be/bH-3PuQC\\_n0](https://youtu.be/bH-3PuQC_n0)\n\n**Python Cybersecurity \u2014 Visual Network Tracker**\n\nDive into Network Traffic visualization using the Python programming language, Wireshark and Google Maps. This tutorial covers the implementation steps needed to take a file of network traffic and convert it into an visual presentation using Google Maps.\n\n**Link**: [https://youtu.be/xuNuy8n8u-Y](https://youtu.be/xuNuy8n8u-Y)\n\n**Python Cybersecurity \u2014 Anonymous FTP Scanner**\n\nBuild a simple FTP Scanner using the Python Programming language. Anonymous FTP is a means by which archive sites allow general access to their archives of information. These sites create a special account called \u201canonymous\u201d\n\n**Link**: [https://youtu.be/BIZfRodSW9w](https://youtu.be/BIZfRodSW9w)","link":"https://www.reddit.com/r/Python/comments/11vl6ul/python_cybersecurity_build_your_own_python_tools/","created":"2023-03-19","tags":["python","reddit"],"meta":{"num_comments":11}}
{"title":"Middle level book to study Python","description":"Is there any middle level book I can use once I know all the basics data types, functions, classes etc in order to level up the language? Thanks!","link":"https://www.reddit.com/r/Python/comments/11vhrgr/middle_level_book_to_study_python/","created":"2023-03-19","tags":["python","reddit"],"meta":{"num_comments":24}}
{"title":"CPorter: Streamlined C &amp; Python Integration with Auto Type Checking and more","description":"Over the weekend I wrote a simple wrapper for ctypes. It simplifies the process of compiling, loading, and calling C functions from Python. I wrote it mostly for fun, I'm sure there are much better library wrappers out there but it was a nice exercise in Python packaging and Mypy.\n\n I do enjoy statically-typed languages for the verboseness, so I took a crack at type hints and static-type checking with Python for once. Only 260 LOC but I'm happy it passes Mypy fully. \n\n\n\n\n\nHere's an example to show some speed differences:\n    \n    from cporter.cporter import CPorter\n\n    def fibonacci_iterative(n):\n        a = 0\n        b = 1\n        elif n == 0:\n            return a\n        elif n == 1:\n            return b\n        else:\n            for i in range(2,n+1):\n                c = a + b\n                a = b\n                b = c\n            return b\n    \n    cporter = CPorter()\n    \n    cporter.set_library_path(\"examples/lib\")\n    cporter.add_library(\"fib\")\n    print(\"Calculating 100th fibonacci number\")\n    py_results = cporter.profile_python_function(fibonacci_iterative, 100)\n    c_results = cporter.profile_function(\"fib\", \"fibonacci_iterative\", 100)\n    \n    print(f\"C Result:{c_results[0]} Time: {c_results[1]} seconds\")\n    print(f\"Python Result:{c_results[0]} Time: {py_results[1]} seconds\")\n\nAnd our result:\n\n    Calculating 100th fibonacci number\n    C Result:3736710778780434371 Time: 0.0001399169999999339 seconds\n    Python Result:3736710778780434371 Time: 5.000000000032756e-06 seconds\n\nAnyway, here's the repo: https://github.com/snacsnoc/cporter\n\nThe inspiration came from another project I submitted a few PRs to, [sushi](https://github.com/dev-sushi/sushi). It's another library to run functions from foreign languages within Python. Check it out, it's pretty cool.","link":"https://www.reddit.com/r/Python/comments/11wd5y8/cporter_streamlined_c_python_integration_with/","created":"2023-03-20","tags":["python","reddit"],"meta":{"num_comments":0}}
{"title":"TUT | quick video tutorial about self-hosting APIs","description":"Hi gouyss, I made a quick video for web devs that want to self-host their apps. I showcase Docker, Docker-Compose and Traefik very quickly and show web developers how to get their APIs public quickly. Nothing groundbreaking but I needed this information and I didn't have a clear understanding of where to find it but it's my utmost hope it helps others that were chasing project requirements that are outlined in this video.   \n\n\nVideo Link: [https://www.youtube.com/watch?v=NIHzYIkXFhE](https://www.youtube.com/watch?v=NIHzYIkXFhE&amp;t=16s)\r  \nGithub Link:  [https://github.com/Wizock/how-to-host-FastAPI-Apis-on-traefik](https://github.com/Wizock/how-to-host-FastAPI-Apis-on-traefik)  \n\n\nAll feedback is appreciated :).","link":"https://www.reddit.com/r/Python/comments/11wbwqv/tut_quick_video_tutorial_about_selfhosting_apis/","created":"2023-03-20","tags":["python","reddit"],"meta":{"num_comments":0}}
{"title":"Is it possible to include C code in a package published to PyPi while not limiting compatibility?","description":"Hello!\n\nI am working on a library, and in a part of it, I perform a customized search over large bytes objects. In my experience, C code runs about an order of magnitude faster when working with primitive data like byte arrays, I wanted to rewrite that part of the code in C to gain performance.\n\nI know about the ctypes module, but I am worried about portability. The library has about 30k downloads, so I want it to be compatible will any system it is installed on.\n\nTo my knowledge, numpy is also largely written in C. Do they compile their code for every possible platform and choose the binaries dynamically, or is there some other good way to do it?\n\nIf someone has any experience regarding this, any help would be appreciated greatly!","link":"https://www.reddit.com/r/Python/comments/11vsrnh/is_it_possible_to_include_c_code_in_a_package/","created":"2023-03-19","tags":["python","reddit"],"meta":{"num_comments":16}}
{"title":"[Survey] Evaluating AI-generated Python code","description":"Hello there! I'm conducting a study on AI-generated code for my thesis project in Computer Science and I'm looking for programmers to rate 50 short code samples on three different factors:\n\n* Accuracy: How closely the solution matches the described task.\n* Quality: How well-written the code is.\n* Readability: How easy it is to understand the code.\n\nThe questionnaire should take approximately 30 minutes to complete and you can use any tools you normally would use when programming, such as documentation, search engines, or programming forums.\n\nhttps://forms.gle/kk2XrPCaKzkqdFVE8","link":"https://www.reddit.com/r/Python/comments/11wd2g6/survey_evaluating_aigenerated_python_code/","created":"2023-03-20","tags":["python","reddit"],"meta":{"num_comments":2}}
{"title":"Alternate python spacing.","description":"&amp;#x200B;\n\nhttps://preview.redd.it/2winm02i7poa1.png?width=952&amp;format=png&amp;auto=webp&amp;v=enabled&amp;s=f1587ca2a285aebdc0826456b6bcf72fa6e951c0\n\nHi! I've personally been using the one on the left a lot. I really like it just as personal preference, no particular reason.\n\nI haven't seen it used anywhere else, but I was wondering what other people thought of this.\n\nThanks.","link":"https://www.reddit.com/r/Python/comments/11vlkh2/alternate_python_spacing/","created":"2023-03-19","tags":["python","reddit"],"meta":{"num_comments":77}}
{"title":"pyWave - Financial transaction tracker.","description":"I've decided to throw together a little thing that's pretty helpful with keeping track of transactions. Like a register book you'd get from a bank.\n\nIt works how you'd expect it to work, with a way to describe what the transaction was for, whether it was money going \"in\" or moving \"out\". It'll automatically update the total, starting with a starting balance that'd you have to set it up with to begin with. Like a normal register book. \n\n\n\nYou can use this project to help with balancing a checkbook, keeping track of money moving in and out of your wallet, etc.\n\n\n\nI don't expect it to be used at all, but I thought it was neat enough to share as it'll most definitely help me out a decent amount.\n\n\n\nYou can find the project here: https://github.com/therealOri/pyWave","link":"https://www.reddit.com/r/Python/comments/11vywu8/pywave_financial_transaction_tracker/","created":"2023-03-19","tags":["python","reddit"],"meta":{"num_comments":4}}
{"title":"Black for web development?","description":"I think everyone would agree on the benefits of Black in the community. It's about the closest we've come to a \\`go ftm\\`, and it reduces the mental load of formatting.\n\nIt works great on python, but what's the equivalent for web development? I know there's \\`djlint\\` for formatting Django templates, but what about raw HTML files? Or non-Django templates? Are there any tools similar to Black in the set-it-and-forget-it category?\n\nI know this doesn't necessarily relate *directly* to python, but I figured everyone here is already familiar with the benefits of Black, and might know of similar tooling.","link":"https://www.reddit.com/r/Python/comments/11vlqcu/black_for_web_development/","created":"2023-03-19","tags":["python","reddit"],"meta":{"num_comments":15}}
{"title":"How to learn for loop, do while loop and functions?","description":"I work as an Analyst, have some experience with Python, like using groupby, filter conditions, joins, windows function, rank function to basically get the business logic to code. I see people who are efficient in coding tend to write their code as a single function rather than going through each step one at a time like cells in jupyter notebook. I want to learn how can I be better at writing loops, conditions and functions together as a whole. Like for example my coworker built a function where he declared a empty list outside the function, use it within, used counters and basically ran a groupby with agg to include the function fetching the desired output as a dataframe. How will I be able to work on such complex functions using loops and other parameters?","link":"https://www.reddit.com/r/Python/comments/11wcya8/how_to_learn_for_loop_do_while_loop_and_functions/","created":"2023-03-20","tags":["python","reddit"],"meta":{"num_comments":2}}
{"title":"In light of PEP 668, I'd like to share how my package handles virtual environments.","description":"The recent discussion around PEP 668 and push towards venvs in Debian Sid made me want to share my solution for working with virtual environments from within Python. Let me explain:\n\n**TL;DR** A `Venv` context manager to control `sys.path` \\+ other goodies.\n\nA few years ago, when building out the [plugin system](https://meerschaum.io/reference/plugins/writing-plugins/), I wanted each plugin (i.e. just a Python module) to be given its own virtual environment, a la `pipx`, into which the plugin's dependencies are installed. In hindsight, I may have been suffering from \"not-invented-here-syndrome\" and maybe should have used one of the 1000 other Python package management tools out there, but to be honest, I'm grateful I took the time to write it exactly how I planned on using the feature. Remember, this wasn't intended to be yet another `pip` clone but instead a controlled way to manage plugins (albeit a bit hacky).\n\nThe internals of the plugin system work something like this:\n\n    &gt;&gt;&gt; from meerschaum.utils.packages import pip_install\n    &gt;&gt;&gt; pip_install('requests', venv='foo')\n    True\n\nThis creates a new venv `foo` (stored as  `~/.config/meerschaum/venvs/foo`) and installs `requests`. Another way to invoke this is through the CLI (though this will trigger installs for other internal components):\n\n    $ mrsm install package requests --venv foo\n\nNow you can use the `Venv` context manager to activate and import from this venv without having to fuss with `sys.path`, `threading.RLock`, or anything like that:\n\n    &gt;&gt;&gt; import meerschaum as mrsm\n    &gt;&gt;&gt; with mrsm.Venv('foo'):\n    ...     import requests\n    ... \n    &gt;&gt;&gt; requests\n    &lt;module 'requests' from '/root/.config/meerschaum/venvs/foo/lib/python3.12/site-packages/requests/__init__.py'&gt;\n\nAgain, this is a supporting feature, but if there's demand for it, I've been considering separating the [venv module](https://docs.meerschaum.io/utils/venv/index.html) into its own package.\n\nI hope you found this insightful and that it contributes positively to the PEP 668 discussion!","link":"https://www.reddit.com/r/Python/comments/11w83l6/in_light_of_pep_668_id_like_to_share_how_my/","created":"2023-03-20","tags":["python","reddit"],"meta":{"num_comments":5}}
{"title":"FastAPI 0.95.0 supports and recommends Annotated \ud83d\ude80 [cross-post from r/FastAPI]","description":"This is probably the biggest FastAPI feature in several months, I thought it was worth sharing it. \ud83e\udd13\n\n(Cross-post from [r/FastAPI](https://www.reddit.com/r/FastAPI/comments/11v0j5w/fastapi_0950_supports_and_recommends_annotated/) but I thought this was cool enough to also share it here \ud83d\ude2c).\n\nFastAPI `0.95.0`, just released, adds support for dependencies and parameters using `Annotated` and recommends its usage. \u2728\n\nThis has **several benefits**, one of the main ones is that now the parameters of your functions with `Annotated` would **not be affected** at all.\n\nIf you call those functions in **other places in your code**, the actual **default values** will be kept, your editor will help you notice missing **required arguments**, Python will require you to pass required arguments at **runtime**, you will be able to **use the same functions** for different things and with different libraries (e.g. **Typer** will soon support `Annotated` too, then you could use the same function for an API and a CLI), etc.\n\nBecause `Annotated` is **standard Python**, you still get all the **benefits** from editors and tools, like **autocompletion**, **inline errors**, etc.\n\nOne of the **biggest benefits** is that now you can create `Annotated` dependencies that are then shared by multiple *path operation functions*, this will allow you to **reduce** a lot of **code duplication** in your codebase, while keeping all the support from editors and tools.\n\nFor example, you could have code like this:\n\n    def get_current_user(token: str):\n        # authenticate user\n        return User()\n\n\n    @app.get(\"/items/\")\n    def read_items(user: User = Depends(get_current_user)):\n        ...\n\n\n    @app.post(\"/items/\")\n    def create_item(*, user: User = Depends(get_current_user), item: Item):\n        ...\n\n\n    @app.get(\"/items/{item_id}\")\n    def read_item(*, user: User = Depends(get_current_user), item_id: int):\n        ...\n\n\n    @app.delete(\"/items/{item_id}\")\n    def delete_item(*, user: User = Depends(get_current_user), item_id: int):\n        ...\n\nThere's a bit of code duplication for the dependency:\n\n    user: User = Depends(get_current_user)\n\n...the bigger the codebase, the more noticeable it is.\n\nNow you can create an annotated dependency once, like this:\n\n    CurrentUser = Annotated[User, Depends(get_current_user)]\n\n\nAnd then you can reuse this `Annotated` dependency:\n\n    CurrentUser = Annotated[User, Depends(get_current_user)]\n\n\n    @app.get(\"/items/\")\n    def read_items(user: CurrentUser):\n        ...\n\n\n    @app.post(\"/items/\")\n    def create_item(user: CurrentUser, item: Item):\n        ...\n\n\n    @app.get(\"/items/{item_id}\")\n    def read_item(user: CurrentUser, item_id: int):\n        ...\n\n\n    @app.delete(\"/items/{item_id}\")\n    def delete_item(user: CurrentUser, item_id: int):\n        ...\n\n...and `CurrentUser` has all the typing information as `User`, so your editor will work as expected (autocompletion and everything), and **FastAPI** will be able to understand the dependency defined in `Annotated`. \ud83d\ude0e\n\nRoughly **all the docs** have been rewritten to use `Annotated` as the main way to declare **parameters** and **dependencies**. All the **examples** in the docs now include a version with `Annotated` and a version without it, for each of the specific Python versions (when there are small differences/improvements in more recent versions). There were around 23K new lines added between docs, examples, and tests. \ud83d\ude80\n\nThe key updated docs are:\n\n* Python Types Intro:\n    * [Type Hints with Metadata Annotations](https://fastapi.tiangolo.com/python-types/#type-hints-with-metadata-annotations).\n* Tutorial:\n    * [Query Parameters and String Validations - Additional validation](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#additional-validation)\n        * [Advantages of `Annotated`](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#advantages-of-annotated)\n    * [Path Parameters and Numeric Validations - Order the parameters as you need, tricks](https://fastapi.tiangolo.com/tutorial/path-params-numeric-validations/#order-the-parameters-as-you-need-tricks)\n        * [Better with `Annotated`](https://fastapi.tiangolo.com/tutorial/path-params-numeric-validations/#better-with-annotated)\n    * [Dependencies - First Steps - Share `Annotated` dependencies](https://fastapi.tiangolo.com/tutorial/dependencies/#share-annotated-dependencies)\n\nSpecial thanks to [@nzig](https://github.com/nzig) for the core implementation and to [@adriangb](https://github.com/adriangb) for the inspiration and idea with [Xpresso](https://github.com/adriangb/xpresso)! \ud83d\ude80\n\nIt took a while to get this done as it involved several days thoroughly reviewing the core PR (impeccable job) and a couple of weeks of full-time, continuous, focused work rewriting the docs, examples, and tests. And now it's finally out! \ud83c\udf89\n\nThis will also probably enable much better third-party integrations that can now export `Annotated` dependencies. \ud83d\ude0e\n\nGo update your FastAPI version and start enjoying using `Annotated`! \ud83d\ude80\n\nCheck more details in the release notes: https://fastapi.tiangolo.com/release-notes/#0950","link":"https://www.reddit.com/r/Python/comments/11v0kcb/fastapi_0950_supports_and_recommends_annotated/","created":"2023-03-18","tags":["python","reddit"],"meta":{"num_comments":21}}
{"title":"Check out `gptty`: a CLI wrapper for ChatGPT written in Python","description":"I created a CLI wrapper for ChatGPT called `gptty` because I was dissatisfied with the categorization tools available in the ChatGPT web UI. It can be installed on Github [https://github.com/signebedi/gptty](https://github.com/signebedi/gptty). I've added preliminary user docs on installation, configuration, and usage. I'd love feedback on (and contributions to) the code base.\n\n**What** `gptty` **does differently than other tools**. `gptty` adds support for tagged questions that, when used correctly, allow you to access past question context across sessions. So, for example, if you prepend a question with the `[shakespeare]` tag, then tag another question with the same, it allows you to access the prior conversation with ChatGPT -  thus largely replicating the context-preserving behavior of the web application while giving users control over how to tag and categorize these conversations.\n\n[Here is an example using the \\[shakespeare\\] tag](https://preview.redd.it/vl45x6mpdtoa1.png?width=1661&amp;format=png&amp;auto=webp&amp;v=enabled&amp;s=3ec47fd71f5308c29dedc89c15302d9efc5cfa70)\n\nFundamentally, this wrapper is focused on user control over the categorization of their conversations, but it also wants to provide an aesthetically pleasing experience. If it gains some traction, I'd like to add support for a bash runtime that allows you to send one-off questions using the same categorization logic, like: `gptty --question \"how old is the universe\" --tag \"physics\"`.\n\nThanks for any feedback, contributions, or installs you can give!","link":"https://www.reddit.com/r/Python/comments/11w7lw6/check_out_gptty_a_cli_wrapper_for_chatgpt_written/","created":"2023-03-20","tags":["python","reddit"],"meta":{"num_comments":0}}
{"title":"bare-bones terminal interface for chatGPT","description":"I wanted to have an access to chatGPT from within the terminal and could not find any implementation that was easy to install and did what I wanted it to do, so I made my own.\n\n&amp;#x200B;\n\nhttps://preview.redd.it/2hmvgw234roa1.png?width=1012&amp;format=png&amp;auto=webp&amp;v=enabled&amp;s=9b78fddeb9d84ef5e8fe62fb5f45bff92715c8c1\n\nIt uses official openAI API. You can find it here: [https://github.com/Ach113/shellGPT](https://github.com/Ach113/shellGPT)\n\nIts very simple to install and use. You can specify which model you want it to use as backend by specifying `-m &lt;modelname&gt;`. Available models can be found [here](https://platform.openai.com/docs/models/moderation) (although not all models seem to work).\n\nYou can enable conversation logging by setting `-l` flag. You can also redirect responses to specific questions to text files using `&gt;`, `&gt;&gt;` operators:\n\n`$ What is the meaning of life &gt; answer.txt`","link":"https://www.reddit.com/r/Python/comments/11vvrqb/barebones_terminal_interface_for_chatgpt/","created":"2023-03-19","tags":["python","reddit"],"meta":{"num_comments":0}}
{"title":"Rooshk - A command line sandbox god mode game!","description":"[https://github.com/cmspeedrunner/rooshk](https://github.com/cmspeedrunner/rooshk)\n\nMADE WITH NO EXTERNAL LIBRARIES AT ALL!","link":"https://www.reddit.com/r/Python/comments/11vy4wd/rooshk_a_command_line_sandbox_god_mode_game/","created":"2023-03-19","tags":["python","reddit"],"meta":{"num_comments":0}}
{"title":"Hi r/py I'm working on a Python library for PySimpleGUI to design UIs with a Live Preview, giving a low barrier to entry. I hope you like it!","description":"This project is a fork from this users original project: [https://github.com/PriestTheBeast/SimpleGUIBuilder](https://github.com/PriestTheBeast/SimpleGUIBuilder)\n\nMy Repo expanding on the foundation with themes, live previews, and hoping to improve QOL: [https://github.com/samfisherirl/PySimpleGUI-Designer-with-Live-Preview](https://github.com/samfisherirl/PySimpleGUI-Designer-with-Live-Preview)\n\nThroughout my experience with software development, I have come to appreciate the accessibility and ease-of-use that Autohotkey provides, especially for mid to low-level use cases. However, for newcomer to the python programming language, I have found that the Qt framework can be quite intimidating to approach. While not impossible to learn, it can present a steep learning curve for beginners.\n\nSome of the things I really appreciate from my time with AHK:\n\n* GUI-to-EXE can be done within a few clicks with no coding, but provide paths to produce full OOP programs.\n* Simplified automation for mid to low-level use cases.\n* Allows for customization and flexibility through user-defined functions and commands.\n\nIn my pursuit to bridge the gap between visual design and code, I have found PySimpleGUI to be a great model. Its streamlined approach has allowed me to quickly translate visual designs into code, making the learning process much smoother. As a lifelong learner, I'm always eager to share my experiences and help others along the way.\n\nWith this project, I want to provide a relatively smooth UI experience that can allow users to build ready-made GUIs with ease.\n\nThis project is still in its early stages, and I'm excited to see where it goes. Personally, I've had success with pywebview and Eel due to the expansive HTML design tools available. I'm open to any recommendations for libraries or tools that you find helpful for GUI design. Thanks!\n\n&amp;#x200B;\n\n&amp;#x200B;\n\n[https://imgur.com/a/LCf7ln1](https://imgur.com/a/LCf7ln1)\n\n&amp;#x200B;\n\nhttps://i.redd.it/9v7bi000cloa1.gif\n\n&amp;#x200B;","link":"https://www.reddit.com/r/Python/comments/11uyzsz/hi_rpy_im_working_on_a_python_library_for/","created":"2023-03-18","tags":["python","reddit"],"meta":{"num_comments":4}}
{"title":"Austin, the CPython frame stack sampler, is now available from PyPI","description":"Austin can now be installed from PyPI [https://pypi.org/project/austin-dist/](https://pypi.org/project/austin-dist/)","link":"https://www.reddit.com/r/Python/comments/11vqqqz/austin_the_cpython_frame_stack_sampler_is_now/","created":"2023-03-19","tags":["python","reddit"],"meta":{"num_comments":0}}
{"title":"What is something you wish there was a Python module for?","description":"","link":"https://www.reddit.com/r/Python/comments/11uyyh3/what_is_something_you_wish_there_was_a_python/","created":"2023-03-18","tags":["python","reddit"],"meta":{"num_comments":140}}
