{"title":"MentalVs is now up and running in the Future Tools discord!","description":"Hi, Everyone!\n\nUse the latest AI technology to generate anything you wish as you duel with your opponent, attacking and reacting, for ten rounds of turn-based, one-of-a-kind combat!\n\nUse might and magic\ud83d\udc4a\ud83c\udffd\u2728, science and fantasy \u269b\ufe0f\u2694\ufe0f, the elements\ud83d\udd25\u2744\ufe0f, light and dark \u2600\ufe0f\ud83c\udf11, space and time \ud83c\udf20\u231b, interdimensional beings\ud83d\udc7d\ud83e\udd16, humor, anime, and any other resource you can envision. Ultimate power courses from your fingertips, and anything is possible in MentalVs!\n\nPromo Video: [https://tinyurl.com/MentalVs-Promo](https://tinyurl.com/MentalVs-Promo) (links to bot and app in description)\n\norrr If you're not interested in playing, you can still check out all the action and vote for your favorite contenders (while getting new prompt ideas ;) ): [https://tinyurl.com/Mentalvs](https://tinyurl.com/Mentalvs)\n\n**Looking for more players?? MentalVs is now running in the Future Tools discord channel!** [**https://discord.gg/wbCqyK6A**](https://discord.gg/wbCqyK6A)","link":"https://www.reddit.com/r/PromptDesign/comments/11n5x2r/mentalvs_is_now_up_and_running_in_the_future/","created":"2023-03-09","tags":["reddit","promptdesign","prompteng"],"meta":{"num_comments":0}}
{"title":"Made a tool to help to improve your prompts","description":"PromptPerfect is a cutting-edge prompt optimizer designed for large language models (LLMs), large models (LMs), and LMOps. The tool optimizes your prompts for ChatGPT, GPT-3.5, DALLE, and StableDiffusion models.   \n\n\nI would love to hear your feedback and thoughts on it. Thank you in advance.   \nLink to the example: [https://promptperfect.jina.ai/share?thread=pmTPARwr3r5zPOTnAKhT](https://promptperfect.jina.ai/share?thread=pmTPARwr3r5zPOTnAKhT)\n\n[An example used for GPT 3 ](https://preview.redd.it/owk8c9k6tqma1.png?width=622&amp;format=png&amp;auto=webp&amp;v=enabled&amp;s=b89adb7575c518e135e0448630e4b5b0d8666fc9)","link":"https://www.reddit.com/r/PromptDesign/comments/11mx2ie/made_a_tool_to_help_to_improve_your_prompts/","created":"2023-03-09","tags":["reddit","promptdesign","prompteng"],"meta":{"num_comments":9}}
{"title":"I make prompt packs, and I put together some ChatGPT prompts to help anyone learning Rust [Free Resource]","description":"## Using these prompts\n\n\n\ud83d\udc68\u200d\ud83c\udfeb This resource is designed to quickly show you the power of chatGPT and serve as a starting point for exploration.\n\n\nCopy and paste these into [https://chat.openai.com/](https://chat.openai.com/)  to see what you get. I\u2019ve also added some responses here. Further explore editing the prompts, trying to direct the AI, and taking the step-by-step responses as new prompts to feed the bot. Enjoy!\n\n[Download All the prompts free on Gumroad](https://godsol.gumroad.com/l/rust-prompts)\n*due to length constraints, this article contains less than half*\n\n\n## Learning Rust (New Concepts)\n\n## Ownership and Borrowing:\n\nWhat are the benefits of Rust's ownership and borrowing system?\n\nHow does Rust prevent common memory-related bugs like null pointers and dangling pointers?\n\nCan you explain the difference between mutable and immutable borrowing in Rust?\n\n## Traits:\n\nHow do traits help with generic programming in Rust?\n\nCan you provide an example of a custom trait in Rust?\n\nWhat is the difference between a trait object and a generic type parameter in Rust?\n\n## Lifetimes:\n\nWhat is a lifetime in Rust and how is it different from a scope?\n\nHow does Rust's borrow checker use lifetimes to prevent dangling pointers?\n\nCan you explain the difference between 'static and 'a lifetimes in Rust?\n\n## Pattern Matching:\n\nWhat is pattern matching and how is it used in Rust?\n\nHow can pattern matching be used with enums and structs in Rust?\n\n## Concurrency:\n\nWhat are some of the built-in concurrency primitives in Rust?\n\nHow does Rust's ownership and borrowing system make writing concurrent code safer?\n\nCan you provide an example of a multi-threaded Rust program?\n\n## Macros:\n\nWhat are macros and how are they used in Rust?\n\nCan you provide an example of a macro in Rust?\n\nHow can macros be used to generate code at compile time in Rust?\n\n## Error Handling:\n\nWhat are some of the built-in error handling mechanisms in Rust?\n\nHow does Rust's error handling system differ from other programming languages?\n\nCan you provide an example of how to use the Result and Option types in Rust?\n\n## Systems Programming\n\n```jsx\nBuild a system daemon that monitors system resource usage and logs events to a file using the Rust Standard Library. Use the log crate for logging and the signal-hook crate to handle system signals.\n```\n\nDevelop a network application that implements a custom protocol using Rust's TCP and UDP socket libraries. Use the nix crate for low-level system programming and the futures crate for asynchronous programming.\n\nCreate a file management tool that allows users to copy, move, and delete files and directories using Rust's standard filesystem library. Use the clap crate for command-line argument parsing and the indicatif crate for progress bars.\n\nBuild a simple web server that handles HTTP requests and serves static files using the Iron web framework and Rust's standard HTTP libraries. Use the chrono crate for handling dates and times and the openssl crate for secure communication.\n\nDevelop a low-level library for interfacing with a hardware device using Rust's Foreign Function Interface (FFI) and the libc crate. Use the crossbeam crate for safe concurrent programming and the rust-crypto crate for encryption and hashing.\n\nCreate a CLI tool that allows users to manipulate audio files using the Rust's audio crate. Use the clap crate for command-line argument parsing and the hound crate for audio file I/O.\n\nBuild a network daemon that listens for incoming connections and manages a pool of worker threads using Rust's standard thread libraries and the crossbeam-channel crate for inter-thread communication. Use the rustls crate for secure communication.\n\nDevelop a command-line tool for converting between different image formats using Rust's image processing library and the clap crate for command-line argument parsing. Use the rayon crate for parallel processing.\n\nCreate a system service that monitors a directory for changes and logs events to a file using the notify crate. Use the chrono crate for handling dates and times and the slog crate for logging.\n\nBuild a command-line tool that encrypts and decrypts files using Rust's cryptography libraries and the clap crate for command-line argument parsing. Use the rand crate for generating random numbers.\n\nDevelop a low-level library for interfacing with a Bluetooth device using Rust's FFI and the BlueZ Bluetooth stack. Use the nix crate for low-level system programming and the futures crate for asynchronous programming.\n\nCreate a CLI tool that allows users to manipulate PDF files using the Rust's PDF processing libraries and the clap crate for command-line argument parsing. Use the rayon crate for parallel processing.\n\nBuild a system daemon that monitors and logs changes to system configuration files using Rust's standard filesystem libraries and the notify crate. Use the serde crate for serialization and deserialization.\n\nDevelop a command-line tool that generates random passwords using Rust's cryptography libraries and the clap crate for command-line argument parsing. Use the rand crate for generating random numbers.\n\nCreate a low-level library for interfacing with a USB device using Rust's FFI and the libusb library. Use the nix crate for low-level system programming and the futures crate for asynchronous programming.\n\nBuild a command-line tool that allows users to manage system processes using Rust's standard process libraries and the clap crate for command-line argument parsing. Use the regex crate for string manipulation.\n\nDevelop a system daemon that manages a pool of worker threads and communicates with them using Rust's standard thread libraries and the crossbeam-channel crate. Use the chrono crate for handling dates and times and the slog crate for logging.\n\nCreate a low-level library for interfacing with a Serial device using Rust's FFI and the serialport library. Use the nix crate for low-level system programming and the futures crate for asynchronous programming.\n\n## DevOps\n\n```jsx\nBuild a Continuous Integration/Continuous Deployment (CI/CD) pipeline using Rust's DevOps library, Rust CI/CD, and the Jenkins automation server. Use the clap crate for command-line argument parsing and the serde crate for serialization and deserialization.\n```\n\nDevelop a tool for infrastructure automation using Rust's DevOps library, Rust Chef, and the Chef configuration management tool. Use the clap crate for command-line argument parsing and the serde crate for serialization and deserialization.\n\nCreate a tool for container orchestration using Rust's DevOps library, Rust Kubernetes, and the Kubernetes container orchestration system. Use the clap crate for command-line argument parsing and the serde crate for serialization and deserialization.\n\nBuild a serverless infrastructure using Rust's DevOps library, Rust Serverless, and the AWS Lambda service. Use the clap crate for command-line argument parsing and the serde crate for serialization and deserialization.\n\nDevelop a tool for continuous monitoring using Rust's DevOps library, Rust Prometheus, and the Prometheus monitoring system. Use the clap crate for command-line argument parsing and the serde crate for serialization and deserialization.\n\nCreate a tool for log management using Rust's DevOps library, Rust Logstash, and the Logstash logging pipeline. Use the clap crate for command-line argument parsing and the serde crate for serialization and deserialization.\n\nBuild a Continuous Integration/Continuous Deployment (CI/CD) pipeline using Rust's DevOps library, Rust Travis, and the Travis CI/CD platform. Use the clap crate for command-line argument parsing and the serde crate for serialization and deserialization.\n\nDevelop a tool for infrastructure testing using Rust's DevOps library, Rust Terraform, and the Terraform infrastructure as code tool. Use the clap crate for command-line argument parsing and the serde crate for serialization and deserialization.\n\nCreate a tool for container security using Rust's DevOps library, Rust Clair, and the Clair container security scanner. Use the clap crate for command-line argument parsing and the serde crate for serialization and deserialization.\n\nBuild a serverless application using Rust's DevOps library, Rust AWS Lambda, and the AWS Lambda service. Use the clap crate for command-line argument parsing and the serde crate for serialization and deserialization.\n\nDevelop a tool for infrastructure visualization using Rust's DevOps library, Rust Graphviz, and the Graphviz graph visualization software. Use the clap crate for command-line argument parsing and the serde crate for serialization and deserialization.\n\nCreate a tool for container monitoring using Rust's DevOps library, Rust Prometheus, and the Prometheus monitoring system. Use the clap crate for command-line argument parsing and the serde crate for serialization and deserialization.\n\nBuild a Continuous Integration/Continuous Deployment (CI/CD) pipeline using Rust's DevOps library, Rust CircleCI, and the CircleCI CI/CD platform. Use the clap crate for command-line argument parsing and the serde crate for serialization and deserialization.\n\nDevelop a tool for infrastructure as code using Rust's DevOps library, Rust Ansible, and the Ansible configuration management tool. Use the clap crate for command-line argument parsing and the serde crate for serialization and deserialization.\n\nCreate a tool for container orchestration using Rust's DevOps library, Rust Nomad, and the Nomad container orchestration system. Use the clap crate for command-line argument parsing and the serde crate for serialization and deserialization.\n\nBuild a serverless application using Rust's DevOps library, Rust Google Cloud Functions, and the Google Cloud Functions service. Use the clap crate for command-line argument parsing and the serde crate for serialization and deserialization.\n\n[Download All the prompts free on Gumroad](https://godsol.gumroad.com/l/rust-prompts)\n*due to length constraints, this article contains less than half*","link":"https://www.reddit.com/r/PromptDesign/comments/11mwsfm/i_make_prompt_packs_and_i_put_together_some/","created":"2023-03-09","tags":["reddit","promptdesign","prompteng"],"meta":{"num_comments":1}}
{"title":"Wrotescan: Prompt Library and Prompt Database","description":"hi all! I created a free library of prompts at [http://www.wrotescan.com/Prompt\\_Library](http://www.wrotescan.com/Prompt_Library).  It also has a feature where you can submit you own prompt when running the demos to the library and it will show up in the \"Community\" section of history. \n\nas a note, API keys and documents are not persisted on [wrotescan.com](https://wrotescan.com). please create then delete any temp keys used for the site.","link":"https://www.reddit.com/r/PromptDesign/comments/11mm4qu/wrotescan_prompt_library_and_prompt_database/","created":"2023-03-09","tags":["reddit","promptdesign","prompteng"],"meta":{"num_comments":1}}
{"title":"Sharing a tool I am creating to fine-tune a model using reddit data.","description":"So as my billionth side project, I decided to create a web-app that scrapes data from reddit and generates a text file that can be used to fine-tune an openAI model such as davinci-003.  I would love to find people to critique this project and contribute to it.\n\n[here](https://platform.openai.com/docs/guides/fine-tuning) is a link for instructions on how to fine tune a model.  When it comes to the step called **prepare training data** I wanted to sort of automate this by allowing the user to get a bunch of prompts/completions from reddit.  I created an app that generates a jsonl file for fine-tuning using the submission title as the prompt and the submission body and/or comments as the completion.  Let me know if this is something people are interested in collaborating on or if there are other people doing similar things.\n\nLink to my app: [https://fine-tune-reddit.herokuapp.com/](https://fine-tune-reddit.herokuapp.com/)\n\nLink to the CLI project on github: [https://github.com/brianSalk/openai-finetune-reddit](https://github.com/brianSalk/openai-finetune-reddit)\n\nLink to the web-app on github: [https://github.com/brianSalk/reddit-finetune-frontend](https://github.com/brianSalk/reddit-finetune-frontend)","link":"https://www.reddit.com/r/PromptDesign/comments/11lzs34/sharing_a_tool_i_am_creating_to_finetune_a_model/","created":"2023-03-08","tags":["reddit","promptdesign","prompteng"],"meta":{"num_comments":10}}
{"title":"Is it possible to ask Chatgpt to write an article based on information that I provide?","description":"Hi, I am wondering if ChatGPT or other similar AI model can write articles based on information that I provide. For example, if I want to write an article on effectiveness of asthma medication and then give it several research articles to read, can it generate an article based no those articles? I know GPT-3 (with API) probably can do it; however, can we do it on ChatGPT or other AI models? Thank you!","link":"https://www.reddit.com/r/PromptDesign/comments/11l88fv/is_it_possible_to_ask_chatgpt_to_write_an_article/","created":"2023-03-07","tags":["reddit","promptdesign","prompteng"],"meta":{"num_comments":12}}
